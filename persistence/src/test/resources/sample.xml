<?xml version="1.0" encoding="UTF-8"?>
<library name="test">
    <version versionNumber="1.0" state="Editable" lastEditDate="2014-04-07T09:30:10Z">
        <computations>
            <simpleComputation package="test.computations" name="MaximumTestValueComputation" changedInVersion="1.0"
                        description="Take the maximum of the values of the testValues map" shouldPropagateExceptions="false">
                <computationExpression>
                    <![CDATA[ val toTestImports = MutableSet()
                              val maxTuple = testValues.maxBy(aTuple => aTuple._2)
                              Some(MutableMap(maxTuple))
                             ]]>
                </computationExpression>
                <imports>
                    <import>scala.collection.mutable.{Map => MutableMap}</import>
                    <import>scala.collection.mutable.{Set => MutableSet}</import>
                </imports>
                <inputs>
                    <mapping>
                        <key>testValues: Map[String, Int]</key>
                        <value>testValues</value>
                    </mapping>
                </inputs>
                <resultKey>maxTestValue</resultKey>
                <logger>computationLogger</logger>
                <securityConfiguration>testSecurityConfiguration</securityConfiguration>
            </simpleComputation>

            <!-- Nonsensical computation just used for testing the building of computations -->
            <abortIfComputation package="test.computations" name="AbortIfContainsMapWithDesiredEntry" changedInVersion="1.0"
                            description="See if the value is a map with one key 'b and value 5" shouldPropagateExceptions="false">
                <predicateExpression>
                    <![CDATA[  x == MutableMap('b -> 5) ]]>
                </predicateExpression>
                <innerComputation><ref>test.computations.MaximumTestValueComputation</ref></innerComputation>
                <imports>
                    <import>scala.collection.mutable.{Map => MutableMap}</import>
                </imports>
                <inputs>
                    <mapping>
                        <key>x: MutableMap[Symbol, Int]</key>
                        <value>maxTestValue</value>
                    </mapping>
                </inputs>
                <logger>computationLogger</logger>
                <securityConfiguration>testSecurityConfiguration</securityConfiguration>
            </abortIfComputation>

            <!-- Nonsensical computation just used for testing the building of computations -->
            <namedComputation package="test.computations" name="SequentialMaxComputation" changedInVersion="1.0"
                              description="Compute the maximum and then do a mapping computation">
                <sequentialComputation>
                    <innerComputations>
                        <innerComputation><ref>test.computations.MaximumTestValueComputation</ref></innerComputation>
                        <innerComputation>
                            <mappingComputation>
                                <innerComputation><ref>test.computations.AbortIfContainsMapWithDesiredEntry</ref></innerComputation>
                                <inputTuple>
                                    <mapping>
                                        <key>testValues: Map[String, Int]</key>
                                        <value>testValues</value>
                                    </mapping>
                                </inputTuple>
                                <resultKey>maxTestValue</resultKey>
                            </mappingComputation>
                        </innerComputation>
                    </innerComputations>
                </sequentialComputation>
            </namedComputation>

            <namedComputation package="test.computations" name="FoldingSumComputation" changedInVersion="1.0"
                              description="Sum all the values in a sequence">
                <foldingComputation>
                    <initialAccumulatorKey>initialAccumulator</initialAccumulatorKey>
                    <inputTuple>
                        <mapping>
                            <key>testValues</key>
                            <value>addend1</value>
                        </mapping>
                    </inputTuple>
                    <accumulatorTuple>
                        <mapping>
                            <key>sumAccumulator</key>
                            <value>addend2</value>
                        </mapping>
                    </accumulatorTuple>

                    <innerComputation>
                        <simpleComputation package="test.computations" name="SumComputation" changedInVersion="1.0"
                                    description="Take the sum of two addends" shouldPropagateExceptions="false">
                            <computationExpression>
                                <![CDATA[ Some(addend1 + addend2) ]]>
                            </computationExpression>
                            <imports></imports>
                            <inputs>
                                <mapping>
                                    <key>addend1:Int</key>
                                    <value>addend1</value>
                                </mapping>
                                <mapping>
                                    <key>addend2:Int</key>
                                    <value>addend2</value>
                                </mapping>
                            </inputs>
                            <resultKey>sum</resultKey>
                            <logger>computationLogger</logger>
                            <securityConfiguration>testSecurityConfiguration</securityConfiguration>
                        </simpleComputation>
                    </innerComputation>
                </foldingComputation>
            </namedComputation>
        </computations>
    </version>
</library>