<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">

    <xs:element name="library">
        <xs:complexType>
            <xs:sequence minOccurs="1" maxOccurs="unbounded">
                <xs:element ref="version"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="version">
        <xs:complexType>
            <xs:all minOccurs="1" maxOccurs="1">
                <xs:element ref="computations"/>
            </xs:all>
            <xs:attribute name="commitDate" type="xs:dateTime"/>
            <xs:attribute name="lastEditDate" type="xs:dateTime"/>
            <xs:attribute name="state" type="versionState" use="required"/>
            <xs:attribute name="versionNumber" type="versionNumberEntry" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:simpleType name="versionNumberEntry">
      <xs:restriction base="xs:string">
        <xs:pattern value="(([0-9])+\.)?(([0-9])+\.)?([0-9])+"/>
      </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="versionState">
      <xs:restriction base="xs:string">
        <xs:enumeration value="Editable" />
        <xs:enumeration value="Committed" />
      </xs:restriction>
    </xs:simpleType>

    <xs:element name="computations">
        <xs:complexType>
            <xs:choice minOccurs="1" maxOccurs="unbounded">
                <xs:element ref="simpleComputation"/>
                <xs:element ref="abortIfComputation"/>
                <xs:element ref="namedComputation"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>

    <xs:element name="simpleComputation">
        <xs:complexType>
            <xs:all minOccurs="1" maxOccurs="1">
                <xs:element ref="computationExpression"/>
                <xs:element ref="imports"/>
                <xs:element ref="input"/>
                <xs:element ref="resultKey"/>
                <xs:element ref="logger"/>
                <xs:element ref="securityConfiguration"/>
            </xs:all>
            <xs:attribute name="package" type="xs:string" use="required"/>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="description" type="xs:string" use="required"/>
            <xs:attribute name="changedInVersion" type="versionNumberEntry" use="required"/>
            <xs:attribute name="shouldPropagateExceptions" type="xs:boolean" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="computationExpression" type="xs:string"/>
    <xs:element name="resultKey" type="xs:string"/>
    <xs:element name="logger" type="xs:string"/>
    <xs:element name="securityConfiguration" type="xs:string"/>

    <xs:element name="abortIfComputation">
        <xs:complexType>
            <xs:all minOccurs="1" maxOccurs="1">
                <xs:element ref="predicateExpression"/>
                <xs:element ref="innerComputation"/>
                <xs:element ref="imports"/>
                <xs:element ref="input"/>
                <xs:element ref="logger"/>
                <xs:element ref="securityConfiguration"/>
            </xs:all>
            <xs:attribute name="package" type="xs:string" use="required"/>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="description" type="xs:string" use="required"/>
            <xs:attribute name="changedInVersion" type="versionNumberEntry" use="required"/>
            <xs:attribute name="shouldPropagateExceptions" type="xs:boolean" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="predicateExpression" type="xs:string"/>

    <xs:element name="namedComputation">
        <xs:complexType>
            <xs:choice>
                <xs:element ref="abortIfNoResultsComputation"/>
                <xs:element ref="abortIfHasResultsComputation"/>
                <xs:element ref="iterativeComputation"/>
                <xs:element ref="mappingComputation"/>
                <xs:element ref="foldingComputation"/>
                <xs:element ref="sequentialComputation"/>
            </xs:choice>
            <xs:attribute name="package" type="xs:string" use="required"/>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="description" type="xs:string" use="required"/>
            <xs:attribute name="changedInVersion" type="versionNumberEntry" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="imports">
        <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="import"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="import" type="xs:string"/>

    <xs:element name="input">
        <xs:complexType>
            <xs:sequence minOccurs="1" maxOccurs="unbounded">
                <xs:element ref="mapping"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="mapping">
        <xs:complexType>
            <xs:all minOccurs="1" maxOccurs="1">
                <xs:element ref="key"/>
                <xs:element ref="value"/>
            </xs:all>
        </xs:complexType>
    </xs:element>

    <xs:element name="key" type="xs:string"/>
    <xs:element name="value" type="xs:string"/>

    <xs:element name="abortIfNoResultsComputation" type="simpleAbortComputationType"/>
    <xs:element name="abortIfHasResultsComputation" type="simpleAbortComputationType"/>

    <xs:complexType name="simpleAbortComputationType">
        <xs:all minOccurs="1" maxOccurs="1">
            <xs:element ref="innerComputation"/>
        </xs:all>
    </xs:complexType>

    <xs:element name="mappingComputation" type="simpleAggregateComputationType"/>
    <xs:element name="iterativeComputation" type="simpleAggregateComputationType"/>

    <xs:complexType name="simpleAggregateComputationType">
        <xs:all minOccurs="1" maxOccurs="1">
            <xs:element ref="innerComputation"/>
            <xs:element ref="inputTuple"/> <!-- Is this really an input? -->
            <xs:element ref="resultKey"/>
        </xs:all>
    </xs:complexType>

    <xs:element name="inputTuple">
        <xs:complexType>
            <xs:sequence minOccurs="1" maxOccurs="1">
                <xs:element ref="mapping"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="foldingComputation">
        <xs:complexType>
            <xs:all minOccurs="1" maxOccurs="1">
                <xs:element ref="initialAccumulatorKey"/>
                <xs:element ref="inputTuple"/>
                <xs:element ref="accumulatorTuple"/>
                <xs:element ref="innerComputations"/>
            </xs:all>
        </xs:complexType>
    </xs:element>

    <xs:element name="initialAccumulatorKey" type="xs:string"/>

    <xs:element name="accumulatorTuple">
        <xs:complexType>
            <xs:sequence minOccurs="1" maxOccurs="1">
                <xs:element ref="mapping"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="innerComputation" type="innerComputationType"/>

    <xs:complexType name="innerComputationType">
         <xs:choice>
             <xs:element name="ref" type="xs:string"/>
             <xs:element ref="simpleComputation"/>
             <xs:element ref="abortIfHasResultsComputation"/>
             <xs:element ref="abortIfNoResultsComputation"/>
             <xs:element ref="abortIfComputation"/>
             <xs:element ref="iterativeComputation"/>
             <xs:element ref="mappingComputation"/>
             <xs:element ref="foldingComputation"/>
             <xs:element ref="sequentialComputation"/>
             <xs:element ref="namedComputation"/>
         </xs:choice>
     </xs:complexType>

    <xs:element name="sequentialComputation">
        <xs:complexType>
            <xs:all minOccurs="1" maxOccurs="1">
                <xs:element ref="innerComputations"/>
            </xs:all>
        </xs:complexType>
    </xs:element>

    <xs:element name="innerComputations">
        <xs:complexType>
            <xs:sequence minOccurs="2" maxOccurs="unbounded">
                <xs:element ref="innerComputation"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

</xs:schema>
